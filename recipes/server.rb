#
# Installs Openvas
#

apt_repository 'openvas' do
  uri 'ppa:mrazavi/openvas'
  distribution 'trusty'
  action :add
end

apt_package 'openvas' do
  action :install
end

apt_package 'sqlite3' do
  action :install
end

# Create OpenVAS certificate
execute "openvas-mkcert" do
  command "openvas-mkcert -q"
  action :run
  not_if "test -e /var/lib/openvas/CA/cacert.pem"
end

# Create /var/lib/openvas/plugins
directory "/var/lib/openvas/plugins" do
  owner "root"
  group "root"
  mode "0755"
  action :create
  not_if "test -d /var/lib/openvas/plugins" 
end

# Update OpenVAS network vulnerability tests 
execute "openvas-nvt-sync" do
  command "openvas-nvt-sync; sleep 5m"
  action :run
  not_if "COUNT=`ls -alh /var/lib/openvas/plugins/a* |wc -l`; [ $COUNT -gt 50 ] && echo true; "
end

# Create SSL client certificate for user om
execute "openvas-mkcert-client" do
  command "openvas-mkcert-client -n om -i"
  action :run
  not_if "test -d /var/lib/openvas/users/om"
end

# Migrate/rebuild database on 1st run
execute "openvassd" do
  command "openvassd"
  user	  "root"
  action :run
  not_if "netstat -nlp |grep openvassd"
end

# Rebuild openvasmd-rebuild
execute "openvasmd-rebuild" do
  command "openvasmd --rebuild"
  user    "root"
  action :run
  not_if "test -d /var/lib/openvas/users/admin"
end

# Execute killall openvassd
execute "killall-openvassd" do
  command "killall openvassd"
  user    "root"
  action :run
  not_if "test -d /var/lib/openvas/users/admin"
end

# Sleep for 15 seconds
execute "sleep" do
  command "sleep 15"
  user    "root"
  action :run
  not_if "test -d /var/lib/openvas/users/admin"
end

# Enable & start openvas-scanner service
service "openvas-scanner" do
  supports :start => true, :stop => true, :status => true, :restart => true, :reload => true
  action [ :enable, :start ]
end

# Enable & start openvas-manager service
service "openvas-manager" do
  supports :start => true, :stop => true, :status => true, :restart => true, :reload => false, :condrestart => true
  action [ :enable, :start ]
end


# Enable & start greenbone-security-assistant service
execute "gsad-service" do
  command '/usr/sbin/gsad --http-only --port 9392'
  not_if "ps aux | grep gsad | egrep -v grep"
end

# Generate random password, assign to admin openvas account
# and write password to /tmp/openvas_admin_pass.txt.
ruby_block "gen_rand_openvas_pass" do
  block do
    def newpass( len )
      
      # Set list of chars to include in pseudo-random password
      chars = ("a".."z").to_a + ("A".."Z").to_a + ("0".."9").to_a
      newpass = ""
      1.upto(len) { |i| newpass << chars[rand(chars.size)] }
      return newpass

    end

    # Set password length to 12 chars
    pass = newpass(12)

    # Write random password to file
    f = File.new( "/etc/openvas/openvas_admin_pass.txt", "w" )
    f.puts( "This is username & password for the OpenVAS admin account.\n" )
    f.puts( "Generated by Opscode Chef!\n" )
    f.puts( "Username: admin Password: #{pass}" )
    f.close

    system( "openvasad -c add_user -n admin -r Admin -w #{pass}" )
    system( "chmod 0640 /etc/openvas/openvas_admin_pass.txt" )

  end
  action :create
  not_if "test -e /etc/openvas/openvas_admin_pass.txt"
end



#gsad --http-only --listen=127.0.0.1 -p 9392
